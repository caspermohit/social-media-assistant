/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/popup.js":
/*!**********************!*\
  !*** ./src/popup.js ***!
  \**********************/
/***/ (() => {

eval("function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// Example functionality\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Get DOM elements\n  var platformSelect = document.getElementById('platform');\n  var postContent = document.getElementById('post-content');\n  var analyzeBtn = document.getElementById('analyze-btn');\n  var improveBtn = document.getElementById('improve-btn');\n  var hashtagBtn = document.getElementById('hashtag-btn');\n  var resultsDiv = document.getElementById('results');\n\n  // Analyze Content Button\n  analyzeBtn.addEventListener('click', function () {\n    var content = postContent.value;\n    var platform = platformSelect.value;\n    if (!content) {\n      showResult('Please enter some content to analyze.');\n      return;\n    }\n\n    // Analyze based on platform guidelines\n    var analysis = analyzeContent(content, platform);\n    showResult(analysis);\n  });\n\n  // Improve Content Button\n  improveBtn.addEventListener('click', function () {\n    var content = postContent.value;\n    var platform = platformSelect.value;\n    if (!content) {\n      showResult('Please enter some content to improve.');\n      return;\n    }\n    var suggestions = improveSuggestions(content, platform);\n    showResult(suggestions);\n  });\n\n  // Generate Hashtags Button\n  hashtagBtn.addEventListener('click', function () {\n    var content = postContent.value;\n    var platform = platformSelect.value;\n    if (!content) {\n      showResult('Please enter content to generate hashtags.');\n      return;\n    }\n    var hashtags = generateHashtags(content, platform);\n    showResult(hashtags);\n  });\n\n  // Helper Functions\n  function showResult(message) {\n    resultsDiv.style.display = 'block';\n    resultsDiv.innerHTML = \"<p>\".concat(message, \"</p>\");\n  }\n  function analyzeContent(content, platform) {\n    var _content$match;\n    // Basic content analysis\n    var wordCount = content.split(/\\s+/).length;\n    var charCount = content.length;\n    var analysis = \"Analysis for \".concat(platform, \":<br>\");\n    analysis += \"- Word count: \".concat(wordCount, \"<br>\");\n    analysis += \"- Character count: \".concat(charCount, \"<br>\");\n\n    // Platform-specific checks\n    switch (platform) {\n      case 'twitter':\n        analysis += \"- Characters remaining: \".concat(280 - charCount, \"<br>\");\n        break;\n      case 'linkedin':\n        analysis += \"- Post length: \".concat(wordCount > 1300 ? 'Too long' : 'Good', \"<br>\");\n        break;\n      case 'instagram':\n        analysis += \"- Optimal hashtag count: \".concat(((_content$match = content.match(/#/g)) === null || _content$match === void 0 ? void 0 : _content$match.length) || 0, \"/30<br>\");\n        break;\n      case 'facebook':\n        analysis += \"- Post engagement prediction: \".concat(wordCount < 80 ? 'Good' : 'Consider shortening', \"<br>\");\n        break;\n    }\n    return analysis;\n  }\n  function improveSuggestions(content, platform) {\n    var _content$match2;\n    // Basic improvement suggestions\n    var suggestions = 'Suggestions:<br>';\n\n    // Check for common improvements\n    if (!content.includes('http') && !content.includes('https')) {\n      suggestions += '- Consider adding a relevant link<br>';\n    }\n    if (content.split('\\n').length < 2) {\n      suggestions += '- Consider breaking text into paragraphs for better readability<br>';\n    }\n\n    // Platform-specific suggestions\n    switch (platform) {\n      case 'twitter':\n        if (content.length > 280) {\n          suggestions += '- Content exceeds Twitter\\'s character limit<br>';\n        }\n        break;\n      case 'linkedin':\n        if (!content.includes('#')) {\n          suggestions += '- Consider adding relevant hashtags (3-5 recommended)<br>';\n        }\n        break;\n      case 'instagram':\n        if (((_content$match2 = content.match(/#/g)) === null || _content$match2 === void 0 ? void 0 : _content$match2.length) > 30) {\n          suggestions += '- Too many hashtags (max 30 recommended)<br>';\n        }\n        break;\n    }\n    return suggestions;\n  }\n  function generateHashtags(content, platform) {\n    // Extract key words from content\n    var words = content.toLowerCase().replace(/[^\\w\\s]/gi, '').split(/\\s+/).filter(function (word) {\n      return word.length > 3;\n    });\n\n    // Generate unique hashtags\n    var hashtags = _toConsumableArray(new Set(words)).slice(0, 5).map(function (word) {\n      return '#' + word;\n    });\n\n    // Platform-specific hashtag recommendations\n    var hashtagSuggestions = 'Suggested Hashtags:<br>';\n    hashtagSuggestions += hashtags.join(' ') + '<br><br>';\n    switch (platform) {\n      case 'instagram':\n        hashtagSuggestions += 'Popular Instagram hashtags:<br>#instagood #photooftheday';\n        break;\n      case 'twitter':\n        hashtagSuggestions += 'Trending Twitter hashtags:<br>#trending #viral';\n        break;\n      case 'linkedin':\n        hashtagSuggestions += 'Professional hashtags:<br>#networking #professional';\n        break;\n    }\n    return hashtagSuggestions;\n  }\n});\n\n//# sourceURL=webpack://social-media-assistant/./src/popup.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/popup.js"]();
/******/ 	
/******/ })()
;